// ------------- Prisma base (MySQL) -------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // mysql://user:pass@host:3306/db
}

// ------------- Enums -------------
enum CostType {
  MP
  TP
  HP
  COMBINATION
  NONE
}

enum SkillUseType {
  PASSIVE
  ACTIVE
}

enum SourceType {
  ITEM
  SKILL
  OTHER
}

enum DamageType {
  TRUE
  PHISICAL
  MAGIC
  NONE
}

enum StackingPolicy {
  REFRESH
  REPLACE
  STACK
  NONE
}

enum EquipSlot {
  HEAD
  CHEST
  LEGS
  HAND
  OFFHAND
  RING1
  RING2
  NONE
}

enum AttributeKind {
  ATTRIBUTE
  EXPERTISE
}

enum itemType {
  CONSUMABLE
  EQUIPPABLE
  MATERIAL
  QUEST
  MISC
}

enum charaterType {
  NPC
  PC
  DEAD
  RETIRE
}

enum ComponentType {
  STATUS
  ATTRIBUTE
  SLOT
  TAG
  NONE
}

enum OperationType {
  ADD
  MULT
  SET
  TOGGLE
  OVERRIDE
  DICE
}

// ------------- Catálogos -------------
model User {
  id       String  @id @default(uuid()) @db.Char(36)
  nickname String  @db.VarChar(191)
  email    String  @unique @db.VarChar(191)
  password String  @db.VarChar(191)
  imageUrl String? @db.VarChar(191)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  characters Character[]

  @@map("users")
}

model Archetype {
  id   String @id @default(uuid()) @db.Char(36)
  name String @db.VarChar(191)

  tp Float
  hp Float
  mp Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  character Character[]

  @@map("archetypes")
}

// ------------- Núcleo do jogador -------------
model Character {
  id     String  @id @default(uuid()) @db.Char(36)
  name   String  @db.VarChar(191)
  race   String? @db.VarChar(191)
  age    Int?
  height Float?
  gender String  @db.VarChar(191)
  money  Decimal @default(0) @db.Decimal(12, 2)

  annotations String? @db.LongText()

  generation Int          @default(2)
  type       charaterType @default(PC)

  imageUrl String? @db.VarChar(191)

  userId      String  @db.Char(36)
  archetypeId String? @db.Char(36)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  archetype Archetype? @relation(fields: [archetypeId], references: [id], onDelete: SetNull)

  attributes     CharacterAttribute[]
  statuses       Status[]
  items          CharacterHasItem[]
  skills         Skill[]
  appliedEffects AppliedEffect[]

  @@index([userId])
  @@map("characters")
}

// ------------- Atributos e Status -------------
model Attributes {
  id   String        @id @default(uuid()) @db.Char(36)
  name String        @db.VarChar(191)
  kind AttributeKind @default(ATTRIBUTE) // 'ATTRIBUTE','EXPERTISE'

  values CharacterAttribute[]

  @@map("attributes")
}

model CharacterAttribute {
  id          String @id @default(uuid()) @db.Char(36)
  characterId String @db.Char(36)
  attributeId String @db.Char(36)
  valueBase   Int    @default(0)
  valueInv    Int    @default(0)
  valueExtra  Int    @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  character Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  attribute Attributes @relation(fields: [attributeId], references: [id], onDelete: Restrict)

  @@unique([characterId, attributeId])
  @@index([characterId])
  @@map("character_attributes")
}

model Status {
  id          String @id @default(uuid()) @db.Char(36)
  characterId String @db.Char(36)
  name        String @db.VarChar(50) // 'HP','MP','TP'...
  valueMax    Float  @default(0)
  valueBonus  Float  @default(0)
  valueActual Float  @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, name])
  @@index([characterId])
  @@map("status")
}

// ------------- Efeitos -------------
model Effect {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String  @db.VarChar(191)
  imgUrl      String? @db.VarChar(191)
  description String? @db.VarChar(400)
  removableBy String? @db.VarChar(191)

  damageType     DamageType
  stackingPolicy StackingPolicy

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  targets        EffectModifier[]
  appliedEffects AppliedEffect[]
  itemLinks      ItemHasEffect[]
  abilityLinks   AbilityEffect[]

  @@map("effects")
}

model EffectModifier {
  id       String @id @default(uuid()) @db.Char(36)
  effectId String @db.Char(36)

  componentName String
  componentType ComponentType
  operationType OperationType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  effect Effect @relation(fields: [effectId], references: [id], onDelete: Cascade)

  @@index([effectId])
  @@map("effect_target")
}

model AppliedEffect {
  id          String     @id @default(uuid()) @db.Char(36)
  characterId String     @db.Char(36)
  effectId    String     @db.Char(36)
  sourceType  SourceType

  duration  Int @default(0)
  startedAt Int @default(0)
  expiresAt Int @default(0)
  stacks    Int @default(0)
  value     Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  effect    Effect    @relation(fields: [effectId], references: [id], onDelete: Restrict)

  @@index([characterId])
  @@index([effectId])
  @@index([expiresAt])
  @@map("applied_effects")
}

// ------------- Habilidades -------------
model Abilities {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String  @db.VarChar(191)
  description String? @db.Text
  imageURL    String? @db.VarChar(191)

  cost_type CostType @default(NONE)
  mp_cost   Int      @default(0)
  tp_cost   Int      @default(0)
  hp_cost   Int      @default(0)

  cooldown_value Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  effects   AbilityEffect[]
  skills    Skill[]
  itemLinks ItemSkills[]

  @@map("Abilities")
}

model AbilityEffect {
  id        String @id @default(uuid()) @db.Char(36)
  abilityId String @db.Char(36)
  effectId  String @db.Char(36)

  formula String? @db.VarChar(191)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  ability Abilities @relation(fields: [abilityId], references: [id], onDelete: Cascade)
  effect  Effect    @relation(fields: [effectId], references: [id], onDelete: Restrict)

  @@unique([abilityId, effectId])
  @@map("ability_effects")
}

model Skill {
  id          String       @id @default(uuid()) @db.Char(36)
  characterId String       @db.Char(36)
  abilityId   String       @db.Char(36)
  cooldown    Int          @default(0)
  useType     SkillUseType @default(ACTIVE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  ability   Abilities @relation(fields: [abilityId], references: [id], onDelete: Restrict)

  @@unique([characterId, abilityId])
  @@map("skills")
}

// ------------- Itens / Inventário -------------
model Items {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String  @db.VarChar(191)
  description String? @db.Text
  imageURL    String? @db.VarChar(191)
  value       Int     @default(0)

  itemType itemType @default(MISC)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  inventory  CharacterHasItem[]
  effects    ItemHasEffect[]
  itemSkills ItemSkills[]

  @@map("items")
}

model CharacterHasItem {
  id            String    @id @default(uuid()) @db.Char(36)
  characterId   String    @db.Char(36)
  itemId        String    @db.Char(36)
  quantity      Int       @default(1)
  value         Int?
  is_equipped   Boolean   @default(false)
  equipped_slot EquipSlot @default(NONE)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  item      Items     @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@unique([characterId, itemId, equipped_slot])
  @@index([characterId])
  @@index([itemId])
  @@map("character_has_item")
}

model ItemHasEffect {
  id        String @id @default(uuid()) @db.Char(36)
  itemId    String @db.Char(36)
  effectsId String @db.Char(36)

  formula String @db.VarChar(191)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  item   Items  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  effect Effect @relation(fields: [effectsId], references: [id], onDelete: Restrict)

  @@unique([itemId, effectsId])
  @@map("item_has_effects")
}

model ItemSkills {
  id        String @id @default(uuid()) @db.Char(36)
  abilityId String @db.Char(36)
  itemId    String @db.Char(36)
  cooldown  Int    @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  ability Abilities @relation(fields: [abilityId], references: [id], onDelete: Restrict)
  item    Items     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, abilityId])
  @@map("item_skills")
}
