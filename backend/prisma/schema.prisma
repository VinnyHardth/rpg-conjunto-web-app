generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
    id String @id @default(uuid())

    email    String @unique
    name     String
    nickname String
    password String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    characters Character[]
}

model Character {
    id String @id @default(uuid())

    userId     String
    user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    name        String
    nickname    String
    description String
    imageUrl    String
    archetype   String @default("None")

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    stats Stats[]
    inventory Inventory[]
    money Money[]
    skills Skill[]
    expertise CharacterState[]
}

model Stats {
    id String @id @default(uuid())

    characterId String
    character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

    strength     Int
    dexterity    Int
    intelligence Int
    wisdom       Int
    constitution Int
    charisma     Int
    destiny      Int

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model Inventory {
  id          String      @id @default(uuid())
  characterId String
  character   Character   @relation(fields: [characterId], references: [id], onDelete: Cascade)

  name        String
  description String
  quantity    Int
  equipped    Boolean     @default(false)
  equipable   Boolean     @default(false)
  slot        String?     // "head", "body", "legs", "weapon", "shield"

  bonuses     ItemBonus[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ItemBonus {
  id        String   @id @default(uuid())
  itemId    String
  item      Inventory @relation(fields: [itemId], references: [id], onDelete: Cascade)

  stat      String   // ex: "strength", "intelligence", "hp"
  type      String   // "flat", "percent", "dice"
  value     String   // "2", "10%", "1d6"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CharacterState {
  id String @id @default(uuid())
  characterId String
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  // Valores máximos
  maxHP Int
  maxMP Int
  maxTP Int

  // Valores atuais
  currentHP Int
  currentMP Int
  currentTP Int

  // Perícias
  magicRes Int
  fisicalRes Int
  perception Int
  intimidation Int
  faith Int
  inspiration Int
  determination Int
  bluff Int
  reflexes Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}


model Skill {
    id String @id @default(uuid())

    characterId String
    character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

    name        String
    cost        Int
    effect      String
    description String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model Money {
    id String @id @default(uuid())

    characterId String
    character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

    earned  Int
    spent   Int
    current Int

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}