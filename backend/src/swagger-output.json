{
  "openapi": "3.0.0",
  "info": {
    "title": "RPG Conjunto API",
    "description": "API for managing users, characters, and campaigns in the RPG Conjunto application.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Endpoint to retrieve all users.",
        "responses": {
          "200": {
            "description": "Users retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/UserDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/UserDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Endpoint to create a new user.",
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity (validation failed or user already exists)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Endpoint to retrieve a user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Endpoint to update an existing user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to update."
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Endpoint to delete a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/email/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by email",
        "description": "Endpoint to retrieve a user by their email.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Email of the user to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/characters/": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get all characters",
        "description": "Endpoint to retrieve all characters.",
        "responses": {
          "200": {
            "description": "Characters retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Characters"
        ],
        "summary": "Create a new character",
        "description": "Endpoint to create a new character.",
        "responses": {
          "201": {
            "description": "Character created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity (validation failed)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCharacterDTO"
              }
            }
          }
        }
      }
    },
    "/characters/{id}": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get character by ID",
        "description": "Endpoint to retrieve a character by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the character to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Character retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "404": {
            "description": "Character not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Characters"
        ],
        "summary": "Update a character",
        "description": "Endpoint to update an existing character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the character to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Character updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Character not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Characters"
        ],
        "summary": "Delete a character",
        "description": "Endpoint to delete a character by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the character to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Character deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "404": {
            "description": "Character not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/characters/user/{userId}": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get characters by user ID",
        "description": "Endpoint to retrieve all characters for a specific user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user whose characters to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Characters retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/archetypes/{id}": {
      "get": {
        "tags": [
          "Archetypes"
        ],
        "summary": "Get archetype by ID",
        "description": "Endpoint to retrieve an archetype by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the archetype to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Archetype retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Archetype not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Archetypes"
        ],
        "summary": "Update an archetype",
        "description": "Endpoint to update an existing archetype.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the archetype to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Archetype updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Archetype not found"
          },
          "422": {
            "description": "Unprocessable Entity (validation failed)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArchetypeDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Archetypes"
        ],
        "summary": "Delete an archetype",
        "description": "Endpoint to delete an existing archetype.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the archetype to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Archetype deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Archetype not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/archetypes/": {
      "get": {
        "tags": [
          "Archetypes"
        ],
        "summary": "Get all archetypes",
        "description": "Endpoint to retrieve all archetypes.",
        "responses": {
          "200": {
            "description": "Archetypes retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Archetypes"
        ],
        "summary": "Create a new archetype",
        "description": "Endpoint to create a new archetype.",
        "responses": {
          "201": {
            "description": "Archetype created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ArchetypeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity (validation failed)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArchetypeDTO"
              }
            }
          }
        }
      }
    },
    "/abilities/": {
      "get": {
        "tags": [
          "Abilities"
        ],
        "summary": "Get all abilitiess",
        "description": "Endpoint to retrieve all abilitiess.",
        "responses": {
          "200": {
            "description": "Abilitiess retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/AbilitiesDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/AbilitiesDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Abilities"
        ],
        "summary": "Create a new abilities",
        "description": "Endpoint to create a new abilities.",
        "responses": {
          "201": {
            "description": "Abilities created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAbilitiesDTO"
              }
            }
          }
        }
      }
    },
    "/abilities/{id}": {
      "get": {
        "tags": [
          "Abilities"
        ],
        "summary": "Get abilities by ID",
        "description": "Endpoint to retrieve a abilities by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the abilities to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Abilities retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              }
            }
          },
          "404": {
            "description": "Abilities not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Abilities"
        ],
        "summary": "Update a abilities",
        "description": "Endpoint to update an existing abilities.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the abilities to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Abilities updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              }
            }
          },
          "404": {
            "description": "Abilities not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAbilitiesDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Abilities"
        ],
        "summary": "Delete a abilities",
        "description": "Endpoint to delete a abilities.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the abilities to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Abilities deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbilitiesDTO"
                }
              }
            }
          },
          "404": {
            "description": "Abilities not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/attributes/": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get all attributess",
        "description": "Endpoint to retrieve all attributess.",
        "responses": {
          "200": {
            "description": "Attributess retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/AttributesDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/AttributesDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Create a new attributes",
        "description": "Endpoint to create a new attributes.",
        "responses": {
          "201": {
            "description": "Attributes created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAttributesDTO"
              }
            }
          }
        }
      }
    },
    "/attributes/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get attributes by ID",
        "description": "Endpoint to retrieve a attributes by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the attributes to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Attributes retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              }
            }
          },
          "404": {
            "description": "Attributes not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Update a attributes",
        "description": "Endpoint to update an existing attributes.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the attributes to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Attributes updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              }
            }
          },
          "404": {
            "description": "Attributes not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttributesDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Delete a attributes",
        "description": "Endpoint to delete a attributes.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the attributes to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Attributes deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AttributesDTO"
                }
              }
            }
          },
          "404": {
            "description": "Attributes not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/effects/": {
      "get": {
        "tags": [
          "Effects"
        ],
        "summary": "Get all effects",
        "description": "Endpoint to retrieve all effects.",
        "responses": {
          "200": {
            "description": "Effects retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/EffectDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/EffectDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Effects"
        ],
        "summary": "Create a new effect",
        "description": "Endpoint to create a new effect.",
        "responses": {
          "201": {
            "description": "Effect created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEffectDTO"
              }
            }
          }
        }
      }
    },
    "/effects/{id}": {
      "get": {
        "tags": [
          "Effects"
        ],
        "summary": "Get effect by ID",
        "description": "Endpoint to retrieve a effect by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the effect to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Effect retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              }
            }
          },
          "404": {
            "description": "Effect not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Effects"
        ],
        "summary": "Update a effect",
        "description": "Endpoint to update an existing effect.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the effect to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Effect updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              }
            }
          },
          "404": {
            "description": "Effect not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEffectDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Effects"
        ],
        "summary": "Delete a effect",
        "description": "Endpoint to delete a effect.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the effect to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Effect deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectDTO"
                }
              }
            }
          },
          "404": {
            "description": "Effect not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/effecttargets/": {
      "get": {
        "tags": [
          "EffectTargets"
        ],
        "summary": "Get all effecttargets",
        "description": "Endpoint to retrieve all effecttargets.",
        "responses": {
          "200": {
            "description": "EffectTargets retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/EffectTargetDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/EffectTargetDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "EffectTargets"
        ],
        "summary": "Create a new effecttarget",
        "description": "Endpoint to create a new effecttarget.",
        "responses": {
          "201": {
            "description": "EffectTarget created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEffectTargetDTO"
              }
            }
          }
        }
      }
    },
    "/effecttargets/{id}": {
      "get": {
        "tags": [
          "EffectTargets"
        ],
        "summary": "Get effecttarget by ID",
        "description": "Endpoint to retrieve a effecttarget by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the effecttarget to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "EffectTarget retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              }
            }
          },
          "404": {
            "description": "EffectTarget not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "EffectTargets"
        ],
        "summary": "Update a effecttarget",
        "description": "Endpoint to update an existing effecttarget.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the effecttarget to update"
          }
        ],
        "responses": {
          "200": {
            "description": "EffectTarget updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              }
            }
          },
          "404": {
            "description": "EffectTarget not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEffectTargetDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EffectTargets"
        ],
        "summary": "Delete a effecttarget",
        "description": "Endpoint to delete a effecttarget.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the effecttarget to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "EffectTarget deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EffectTargetDTO"
                }
              }
            }
          },
          "404": {
            "description": "EffectTarget not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/items/": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get all itemss",
        "description": "Endpoint to retrieve all itemss.",
        "responses": {
          "200": {
            "description": "Itemss retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/ItemsDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/ItemsDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create a new items",
        "description": "Endpoint to create a new items.",
        "responses": {
          "201": {
            "description": "Items created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemsDTO"
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get items by ID",
        "description": "Endpoint to retrieve a items by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the items to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Items retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              }
            }
          },
          "404": {
            "description": "Items not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Update a items",
        "description": "Endpoint to update an existing items.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the items to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Items updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              }
            }
          },
          "404": {
            "description": "Items not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemsDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete a items",
        "description": "Endpoint to delete a items.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the items to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Items deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsDTO"
                }
              }
            }
          },
          "404": {
            "description": "Items not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/skills/": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get all skills",
        "description": "Endpoint to retrieve all skills.",
        "responses": {
          "200": {
            "description": "Skills retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/SkillDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/SkillDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Skills"
        ],
        "summary": "Create a new skill",
        "description": "Endpoint to create a new skill.",
        "responses": {
          "201": {
            "description": "Skill created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillDTO"
              }
            }
          }
        }
      }
    },
    "/skills/{id}": {
      "get": {
        "tags": [
          "Skills"
        ],
        "summary": "Get skill by ID",
        "description": "Endpoint to retrieve a skill by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the skill to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Skill retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              }
            }
          },
          "404": {
            "description": "Skill not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Skills"
        ],
        "summary": "Update a skill",
        "description": "Endpoint to update an existing skill.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the skill to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Skill updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              }
            }
          },
          "404": {
            "description": "Skill not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSkillDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Skills"
        ],
        "summary": "Delete a skill",
        "description": "Endpoint to delete a skill.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the skill to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Skill deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SkillDTO"
                }
              }
            }
          },
          "404": {
            "description": "Skill not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "nickname": {
            "type": "string",
            "example": "johnd"
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/user.png"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "UserDTO"
        }
      },
      "CreateUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "nickname": {
            "type": "string",
            "example": "johnd"
          },
          "password": {
            "type": "string",
            "example": "securePassword123"
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/user.png"
          }
        },
        "xml": {
          "name": "CreateUserDTO"
        }
      },
      "UpdateUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "new_email@example.com"
          },
          "nickname": {
            "type": "string",
            "example": "new_nickname"
          },
          "password": {
            "type": "string",
            "example": "newSecurePassword456"
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/new_user.png"
          }
        },
        "xml": {
          "name": "UpdateUserDTO"
        }
      },
      "DeleteUserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteUserDTO"
        }
      },
      "CharacterDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Leena Timestar"
          },
          "race": {
            "type": "string",
            "example": "Human"
          },
          "age": {
            "type": "number",
            "example": 25
          },
          "height": {
            "type": "number",
            "example": 170
          },
          "money": {
            "type": "number",
            "example": 1000
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/leena.png"
          },
          "userId": {
            "type": "string",
            "example": "uuid"
          },
          "archetypeId": {
            "type": "string",
            "example": "uuid"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "CharacterDTO"
        }
      },
      "CreateCharacterDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Leena Timestar"
          },
          "race": {
            "type": "string",
            "example": "Human"
          },
          "age": {
            "type": "number",
            "example": 25
          },
          "height": {
            "type": "number",
            "example": 170
          },
          "money": {
            "type": "number",
            "example": 1000
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/leena.png"
          },
          "userId": {
            "type": "string",
            "example": "uuid"
          },
          "archetypeId": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "CreateCharacterDTO"
        }
      },
      "UpdateCharacterDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Updated Name"
          },
          "race": {
            "type": "string",
            "example": "Updated Race"
          },
          "age": {
            "type": "number",
            "example": 30
          },
          "height": {
            "type": "number",
            "example": 175
          },
          "money": {
            "type": "number",
            "example": 1500
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/updated_leena.png"
          }
        },
        "xml": {
          "name": "UpdateCharacterDTO"
        }
      },
      "DeleteCharacterDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteCharacterDTO"
        }
      },
      "ArchetypeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Warrior"
          },
          "hp": {
            "type": "number",
            "example": 100
          },
          "mp": {
            "type": "number",
            "example": 50
          },
          "tp": {
            "type": "number",
            "example": 20
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "ArchetypeDTO"
        }
      },
      "CreateArchetypeDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Warrior"
          },
          "hp": {
            "type": "number",
            "example": 100
          },
          "mp": {
            "type": "number",
            "example": 50
          },
          "tp": {
            "type": "number",
            "example": 20
          }
        },
        "xml": {
          "name": "CreateArchetypeDTO"
        }
      },
      "UpdateArchetypeDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mage"
          }
        },
        "xml": {
          "name": "UpdateArchetypeDTO"
        }
      },
      "DeleteArchetypeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteArchetypeDTO"
        }
      },
      "AbilitiesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Fireball"
          },
          "description": {
            "type": "string",
            "example": "A powerful fire attack."
          },
          "imageURL": {
            "type": "string",
            "example": "http://example.com/images/fireball.png"
          },
          "cost_type": {
            "type": "string",
            "example": "MP"
          },
          "mp_cost": {
            "type": "number",
            "example": 20
          },
          "tp_cost": {
            "type": "number",
            "example": 0
          },
          "cooldown_value": {
            "type": "number",
            "example": 5
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "AbilitiesDTO"
        }
      },
      "CreateAbilitiesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Fireball"
          },
          "description": {
            "type": "string",
            "example": "A powerful fire attack."
          },
          "imageURL": {
            "type": "string",
            "example": "http://example.com/images/fireball.png"
          },
          "cost_type": {
            "type": "string",
            "example": "MP"
          },
          "mp_cost": {
            "type": "number",
            "example": 20
          },
          "tp_cost": {
            "type": "number",
            "example": 0
          },
          "cooldown_value": {
            "type": "number",
            "example": 5
          }
        },
        "xml": {
          "name": "CreateAbilitiesDTO"
        }
      },
      "UpdateAbilitiesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Devastating Blow"
          },
          "description": {
            "type": "string",
            "example": "An even more powerful attack."
          },
          "imageURL": {
            "type": "string",
            "example": "http://example.com/images/devastating_blow.png"
          },
          "cost_type": {
            "type": "string",
            "example": "TP"
          },
          "mp_cost": {
            "type": "number",
            "example": 0
          },
          "tp_cost": {
            "type": "number",
            "example": 10
          },
          "cooldown_value": {
            "type": "number",
            "example": 3
          }
        },
        "xml": {
          "name": "UpdateAbilitiesDTO"
        }
      },
      "DeleteAbilitiesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteAbilitiesDTO"
        }
      },
      "AttributesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Strength"
          },
          "kind": {
            "type": "string",
            "example": "ATTRIBUTE"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "AttributesDTO"
        }
      },
      "CreateAttributesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Strength"
          },
          "kind": {
            "type": "string",
            "example": "ATTRIBUTE"
          }
        },
        "xml": {
          "name": "CreateAttributesDTO"
        }
      },
      "UpdateAttributesDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dexterity"
          },
          "kind": {
            "type": "string",
            "example": "EXPERTISE"
          }
        },
        "xml": {
          "name": "UpdateAttributesDTO"
        }
      },
      "DeleteAttributesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteAttributesDTO"
        }
      },
      "ItemsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Health Potion"
          },
          "description": {
            "type": "string",
            "example": "Restores 50 HP."
          },
          "imageURL": {
            "type": "string",
            "example": "http://example.com/images/health_potion.png"
          },
          "value": {
            "type": "number",
            "example": 50
          },
          "itemType": {
            "type": "string",
            "example": "CONSUMABLE"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "ItemsDTO"
        }
      },
      "CreateItemsDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Health Potion"
          },
          "description": {
            "type": "string",
            "example": "Restores 50 HP."
          },
          "imageURL": {
            "type": "string",
            "example": "http://example.com/images/health_potion.png"
          },
          "value": {
            "type": "number",
            "example": 50
          },
          "itemType": {
            "type": "string",
            "example": "CONSUMABLE"
          }
        },
        "xml": {
          "name": "CreateItemsDTO"
        }
      },
      "UpdateItemsDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mana Potion"
          },
          "description": {
            "type": "string",
            "example": "Restores 30 MP."
          },
          "imageURL": {
            "type": "string",
            "example": "http://example.com/images/mana_potion.png"
          },
          "value": {
            "type": "number",
            "example": 30
          },
          "itemType": {
            "type": "string",
            "example": "EQUIPPABLE"
          }
        },
        "xml": {
          "name": "UpdateItemsDTO"
        }
      },
      "DeleteItemsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteItemsDTO"
        }
      },
      "EffectDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Poison"
          }
        },
        "xml": {
          "name": "EffectDTO"
        }
      },
      "CreateEffectDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Poison"
          },
          "imgUrl": {
            "type": "string",
            "example": "http://example.com/images/poison.png"
          }
        },
        "xml": {
          "name": "CreateEffectDTO"
        }
      },
      "UpdateEffectDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Burn"
          },
          "imgUrl": {
            "type": "string",
            "example": "http://example.com/images/burn.png"
          }
        },
        "xml": {
          "name": "UpdateEffectDTO"
        }
      },
      "DeleteEffectDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteEffectDTO"
        }
      },
      "SkillDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "characterId": {
            "type": "string",
            "example": "uuid"
          },
          "abilityId": {
            "type": "string",
            "example": "uuid"
          },
          "cooldown": {
            "type": "number",
            "example": 5
          },
          "useType": {
            "type": "string",
            "example": "PASSIVE"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "SkillDTO"
        }
      },
      "CreateSkillDTO": {
        "type": "object",
        "properties": {
          "characterId": {
            "type": "string",
            "example": "uuid"
          },
          "abilityId": {
            "type": "string",
            "example": "uuid"
          },
          "cooldown": {
            "type": "number",
            "example": 5
          },
          "useType": {
            "type": "string",
            "example": "PASSIVE"
          }
        },
        "xml": {
          "name": "CreateSkillDTO"
        }
      },
      "UpdateSkillDTO": {
        "type": "object",
        "properties": {
          "characterId": {
            "type": "string",
            "example": "new-uuid"
          },
          "abilityId": {
            "type": "string",
            "example": "new-uuid"
          },
          "cooldown": {
            "type": "number",
            "example": 3
          },
          "useType": {
            "type": "string",
            "example": "ACTIVE"
          }
        },
        "xml": {
          "name": "UpdateSkillDTO"
        }
      },
      "DeleteSkillDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteSkillDTO"
        }
      },
      "EffectTargetDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "effectId": {
            "type": "string",
            "example": "uuid"
          },
          "targetCode": {
            "type": "string",
            "example": "STATUS"
          },
          "targetType": {
            "type": "string",
            "example": "Strength"
          },
          "value": {
            "type": "number",
            "example": 10
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "EffectTargetDTO"
        }
      },
      "CreateEffectTargetDTO": {
        "type": "object",
        "properties": {
          "effectId": {
            "type": "string",
            "example": "uuid"
          },
          "targetCode": {
            "type": "string",
            "example": "STATUS"
          },
          "targetType": {
            "type": "string",
            "example": "Strength"
          },
          "value": {
            "type": "number",
            "example": 10
          }
        },
        "xml": {
          "name": "CreateEffectTargetDTO"
        }
      },
      "UpdateEffectTargetDTO": {
        "type": "object",
        "properties": {
          "effectId": {
            "type": "string",
            "example": "new-uuid"
          },
          "targetCode": {
            "type": "string",
            "example": "ATTRIBUTE"
          },
          "targetType": {
            "type": "string",
            "example": "Dexterity"
          },
          "value": {
            "type": "number",
            "example": 15
          }
        },
        "xml": {
          "name": "UpdateEffectTargetDTO"
        }
      },
      "DeleteEffectTargetDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteEffectTargetDTO"
        }
      }
    }
  }
}