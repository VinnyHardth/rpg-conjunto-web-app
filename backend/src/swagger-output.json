{
  "openapi": "3.0.0",
  "info": {
    "title": "RPG Conjunto API",
    "description": "API for managing users, characters, and campaigns in the RPG Conjunto application.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    }
  ],
  "paths": {
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Endpoint to retrieve all users.",
        "responses": {
          "200": {
            "description": "Users retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/UserDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/UserDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Endpoint to create a new user.",
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity (validation failed or user already exists)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Endpoint to retrieve a user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Endpoint to update an existing user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to update."
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Endpoint to delete a user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/email/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by email",
        "description": "Endpoint to retrieve a user by their email.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Email of the user to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/characters/": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get all characters",
        "description": "Endpoint to retrieve all characters.",
        "responses": {
          "200": {
            "description": "Characters retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Characters"
        ],
        "summary": "Create a new character",
        "description": "Endpoint to create a new character.",
        "responses": {
          "201": {
            "description": "Character created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Entity (validation failed)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCharacterDTO"
              }
            }
          }
        }
      }
    },
    "/characters/{id}": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get character by ID",
        "description": "Endpoint to retrieve a character by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the character to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Character retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "404": {
            "description": "Character not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Characters"
        ],
        "summary": "Update a character",
        "description": "Endpoint to update an existing character.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the character to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Character updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Character not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCharacterDTO"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Characters"
        ],
        "summary": "Delete a character",
        "description": "Endpoint to delete a character by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the character to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Character deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterDTO"
                }
              }
            }
          },
          "404": {
            "description": "Character not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/characters/user/{userId}": {
      "get": {
        "tags": [
          "Characters"
        ],
        "summary": "Get characters by user ID",
        "description": "Endpoint to retrieve all characters for a specific user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the user whose characters to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Characters retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "array"
                    },
                    "items": {
                      "$ref": "#/components/schemas/CharacterDTO"
                    }
                  },
                  "xml": {
                    "name": "main"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "nickname": {
            "type": "string",
            "example": "johnd"
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/user.png"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "UserDTO"
        }
      },
      "CreateUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "nickname": {
            "type": "string",
            "example": "johnd"
          },
          "password": {
            "type": "string",
            "example": "securePassword123"
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/user.png"
          }
        },
        "xml": {
          "name": "CreateUserDTO"
        }
      },
      "UpdateUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "new_email@example.com"
          },
          "nickname": {
            "type": "string",
            "example": "new_nickname"
          },
          "password": {
            "type": "string",
            "example": "newSecurePassword456"
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/new_user.png"
          }
        },
        "xml": {
          "name": "UpdateUserDTO"
        }
      },
      "DeleteUserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteUserDTO"
        }
      },
      "CharacterDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Leena Timestar"
          },
          "race": {
            "type": "string",
            "example": "Human"
          },
          "age": {
            "type": "number",
            "example": 25
          },
          "height": {
            "type": "number",
            "example": 170
          },
          "money": {
            "type": "number",
            "example": 1000
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/leena.png"
          },
          "userId": {
            "type": "string",
            "example": "uuid"
          },
          "characterArchetypeId": {
            "type": "string",
            "example": "uuid"
          },
          "createdAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2023-10-01T12:00:00Z"
          },
          "deletedAt": {}
        },
        "xml": {
          "name": "CharacterDTO"
        }
      },
      "CreateCharacterDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Leena Timestar"
          },
          "race": {
            "type": "string",
            "example": "Human"
          },
          "age": {
            "type": "number",
            "example": 25
          },
          "height": {
            "type": "number",
            "example": 170
          },
          "money": {
            "type": "number",
            "example": 1000
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/leena.png"
          },
          "userId": {
            "type": "string",
            "example": "uuid"
          },
          "characterArchetypeId": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "CreateCharacterDTO"
        }
      },
      "UpdateCharacterDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Updated Name"
          },
          "race": {
            "type": "string",
            "example": "Updated Race"
          },
          "age": {
            "type": "number",
            "example": 30
          },
          "height": {
            "type": "number",
            "example": 175
          },
          "money": {
            "type": "number",
            "example": 1500
          },
          "imageUrl": {
            "type": "string",
            "example": "http://example.com/images/updated_leena.png"
          }
        },
        "xml": {
          "name": "UpdateCharacterDTO"
        }
      },
      "DeleteCharacterDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          }
        },
        "xml": {
          "name": "DeleteCharacterDTO"
        }
      }
    }
  }
}